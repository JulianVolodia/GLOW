// GLOWThreeCompatibility.js r1.1 - http://github.com/empaempa/GLOW
GLOW.ThreeJS=function(){return{init:function(){THREE===void 0?console.error("GLOW.ThreeJS.init: THREE is not loaded. Quitting."):GLOW.Uniform.prototype.getNativeValue=function(){if(!this.data.GLOW){if(this.data instanceof THREE.Vector2)this.data.GLOW=new Float32Array(2),this.getNativeValue=function(){this.data.GLOW[0]=this.data.x;this.data.GLOW[1]=this.data.y;return this.data.GLOW};else if(this.data instanceof THREE.Vector3)this.data.GLOW=new Float32Array(3),this.getNativeValue=function(){this.data.GLOW[0]=
this.data.x;this.data.GLOW[1]=this.data.y;this.data.GLOW[2]=this.data.z;return this.data.GLOW};else if(this.data instanceof THREE.Vector4)this.data.GLOW=new Float32Array(4),this.getNativeValue=function(){this.data.GLOW[0]=this.data.x;this.data.GLOW[1]=this.data.y;this.data.GLOW[2]=this.data.z;this.data.GLOW[3]=this.data.w;return this.data.GLOW};else if(this.data instanceof THREE.Color)this.data.GLOW=new Float32Array(3),this.getNativeValue=function(){this.data.GLOW[0]=this.data.r;this.data.GLOW[1]=
this.data.g;this.data.GLOW[2]=this.data.b;return this.data.GLOW};else if(this.data instanceof THREE.Matrix3)this.data.GLOW=new Float32Array(9),this.getNativeValue=function(){this.data.GLOW[0]=this.data.n11;this.data.GLOW[1]=this.data.n21;this.data.GLOW[2]=this.data.n31;this.data.GLOW[3]=this.data.n12;this.data.GLOW[4]=this.data.n22;this.data.GLOW[5]=this.data.n32;this.data.GLOW[6]=this.data.n13;this.data.GLOW[7]=this.data.n23;this.data.GLOW[8]=this.data.n33;return this.data.GLOW};else if(this.data instanceof
THREE.Matrix4)this.data.GLOW=new Float32Array(16),this.getNativeValue=function(){this.data.flattenToArray(this.data.GLOW);return this.data.GLOW};return this.getNativeValue()}}},parseGeometry:function(f){if(f.GLOW)return f.GLOW;var c=[],b=[],a=[],i=[],k,l=f.faces.length,h=0,e,j,m=["a","b","c","d"],g,d;for(k=0;k<l;k++){g=f.faces[k];g instanceof THREE.Face3?(c.push(h++),c.push(h++),c.push(h++),j=3):(c.push(h+0),c.push(h+1),c.push(h+2),c.push(h+0),c.push(h+2),c.push(h+3),h+=4,j=4);for(e=0;e<j;e++)d=f.vertices[g[m[e]]].position,
b.push(d.x),b.push(d.y),b.push(d.z);if(g.vertexColors&&g.vertexColors.length)for(e=0;e<j;e++)d=g.vertexColors[e],i.push(d.r),i.push(d.g),i.push(d.b);else if(g.color)for(e=0;e<j;e++)d=g.vertexColors[e],i.push(d.r),i.push(d.g),i.push(d.b);if(g.vertexNormals&&g.vertexNormals.length)for(e=0;e<j;e++)d=g.vertexNormal[e],a.push(d.x),a.push(d.y),a.push(d.z);else if(g.normal){d=g.normal;for(e=0;e<j;e++)a.push(d.x),a.push(d.y),a.push(d.z)}}f.GLOW={elements:new Float32Array(c),vertices:new Float32Array(b),colors:new Float32Array(i),
normals:new Float32Array(a)};return f.GLOW}}}();
GLOW.ThreeJS.Mesh=function(){if(THREE){var f=function(c,b){THREE.Object3D.call(this);this.geometry=c;GLOW.ThreeJS.parseGeometry(this.geometry);if(b){b.elements=this.geometry.GLOW.elements;for(var a in b.data)if(b.data[a]==="vertices")b.data[a]=this.geometry.GLOW.vertices;else if(b.data[a]==="colors")b.data[a]=this.geometry.GLOW.colors;else if(b.data[a]==="normals")b.data[a]=this.geometry.GLOW.normals;else if(b.data[a]==="matrix")b.data[a]=this.matrix;else if(b.data[a]==="matrixWorld")b.data[a]=this.matrixWorld;
else if(b.data[a]==="matrixRotationWorld")b.data[a]=this.matrixRotationWorld;else if(b.data[a]==="position")b.data[a]=this.position;else if(b.data[a]==="rotation")b.data[a]=this.rotation;else if(b.data[a]==="scale")b.data[a]=this.scale;this.shader=new GLOW.Shader(b)}};f.prototype=new THREE.Object3D;f.prototype.constructor=f;f.prototype.draw=function(){this.shader.draw()};f.prototype.clone=function(c){var b=new GLOW.ThreeJS.Mesh(this.geometry),a;for(a in c)if(c[a]==="matrix")c[a]=b.matrix;else if(c[a]===
"matrixWorld")c[a]=b.matrixWorld;else if(c[a]==="matrixRotationWorld")c[a]=b.matrixRotationWorld;else if(c[a]==="position")c[a]=b.position;else if(c[a]==="rotation")c[a]=b.rotation;else if(c[a]==="scale")c[a]=b.scale;b.shader=this.shader.clone(c);return b};return f}return function(){console.error("GLOW.ThreeJS.Mesh.construct: THREE not loaded")}}();
